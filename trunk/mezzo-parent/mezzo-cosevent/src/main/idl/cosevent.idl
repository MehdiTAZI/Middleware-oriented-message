module cosevent {
	
	struct Event{
		long timeStamp;
		any content;
	};
	
	exception AlreadyRegisteredException{
	};
	
	exception NotRegisteredException{
	};
	
	exception AlreadyConnectedException{
	};
	
	exception NotConnectedException{
	};
	
	exception MaximalConnectionReachedException{
	};
	
	exception ChannelNotFoundException{
	};
	
	exception ConsumerNotFoundException{
	};
	
	interface CallbackConsumer{
		void receive(in Event evt) raises (ConsumerNotFoundException);
	};
	
	interface ProxyForPushConsumer{
		void subscribe(in CallbackConsumer cc) raises (ChannelNotFoundException,AlreadyRegisteredException);
		void unsubscribe() raises (ChannelNotFoundException,NotRegisteredException);
		void connect() raises (ChannelNotFoundException,AlreadyConnectedException,MaximalConnectionReachedException,NotRegisteredException);
		void disconnect() raises (ChannelNotFoundException,NotConnectedException,NotRegisteredException);
	};
	
	interface ProxyForPushSupplier{
		boolean connect() raises (ChannelNotFoundException,AlreadyConnectedException,MaximalConnectionReachedException);
		void push(in Event evt) raises (ChannelNotFoundException);
		boolean disconnect() raises (ChannelNotFoundException,NotConnectedException);
	};
	
	interface Channel{
		ProxyForPushConsumer getProxyForPushConsumer() raises (ChannelNotFoundException);
		ProxyForPushSupplier getProxyForPushSupplier() raises (ChannelNotFoundException);
	};
};
